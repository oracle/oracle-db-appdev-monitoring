"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[6897],{8453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>i});var n=t(6540);const r={},s=n.createContext(r);function o(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:a},e.children)}},9466:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"configuration/hashicorp-vault","title":"HashiCorp Vault","description":"Securely load database credentials from HashiCorp Vault.","source":"@site/docs/configuration/hashicorp-vault.md","sourceDirName":"configuration","slug":"/configuration/hashicorp-vault","permalink":"/oracle-db-appdev-monitoring/docs/next/configuration/hashicorp-vault","draft":false,"unlisted":false,"editUrl":"https://github.com/oracle/oracle-db-appdev-monitoring/tree/main/site/docs/configuration/hashicorp-vault.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"HashiCorp Vault","sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Azure Vault","permalink":"/oracle-db-appdev-monitoring/docs/next/configuration/azure-vault"},"next":{"title":"Advanced","permalink":"/oracle-db-appdev-monitoring/docs/next/category/advanced"}}');var r=t(4848),s=t(8453);const o={title:"HashiCorp Vault",sidebar_position:8},i="HashiCorp Vault",l={},c=[{value:"Dynamic database credentials",id:"dynamic-database-credentials",level:3},{value:"Authentication",id:"authentication",level:3}];function d(e){const a={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"hashicorp-vault",children:"HashiCorp Vault"})}),"\n",(0,r.jsx)(a.p,{children:"Securely load database credentials from HashiCorp Vault."}),"\n",(0,r.jsxs)(a.p,{children:["Each database in the config file may be configured to use HashiCorp Vault. To load the database username and/or password from HashiCorp Vault, set the ",(0,r.jsx)(a.code,{children:"vault.hashicorp"})," property to contain the following information:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",children:'databases:\n  mydb:\n    vault:\n      hashicorp:\n        proxySocket: /var/run/vault/vault.sock\n        mountType: "kvv1", "kvv2", "database" or "logical"\n        mountName: secret engine mount path\n        secretPath: path of the secret or database role name\n        usernameAttribute: name of the JSON attribute, where to read the database username, if ommitted defaults to "username"\n        passwordAttribute: name of the JSON attribute, where to read the database password, if ommitted defaults to "password"\n'})}),"\n",(0,r.jsx)(a.p,{children:"Example"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",children:"databases:\n  mydb:\n    vault:\n      hashicorp:\n        proxySocket: /var/run/vault/vault.sock\n        mountType: kvv2\n        mountName: dev\n        secretPath: oracle/mydb/monitoring\n"})}),"\n",(0,r.jsx)(a.h3,{id:"dynamic-database-credentials",children:"Dynamic database credentials"}),"\n",(0,r.jsx)(a.p,{children:"Instead of fixed database credentials Vault also supports dynamic credentials that are created every time application requests them. This\nmakes sure the credentials always have a short time-to-live and even if they leak, they quickly become invalid."}),"\n",(0,r.jsxs)(a.p,{children:["Follow ",(0,r.jsx)(a.a,{href:"https://developer.hashicorp.com/vault/docs/secrets/databases/oracle",children:"Vault documentation on how to set up Oracle database plugin for Vault"}),"."]}),"\n",(0,r.jsx)(a.p,{children:"A few additional notes about connecting exporter to CDB. NB! Below are just example commands, adjust them to fit your environment."}),"\n",(0,r.jsx)(a.p,{children:'When setting up connection to CDB, then also need to edit "username_template" parameter, so Vault would create a C## common user for exporter.'}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sh",children:'vault write database/config/mydb \\\n    plugin_name=vault-plugin-database-oracle \\\n    allowed_roles="mydb_exporter" \\\n    connection_url=\'{{username}}/{{password}}@//172.17.0.3:1521/FREE\' \\\n    username_template=\'{{ printf "C##V_%s_%s_%s_%s" (.DisplayName | truncate 8) (.RoleName | truncate 8) (random 20) (unix_time) | truncate 30 | uppercase | replace "-" "_" | replace "." "_" }}\' \\\n    username=\'c##vaultadmin\' \\\n    password=\'vaultadmin\'\n'})}),"\n",(0,r.jsx)(a.p,{children:"Since Vault is creating common users in CDB, it needs to have CREATE/ALTER/DROP USER privileges on all containers. Here is a modification of the documented Vault Oracle plugin admin user privileges."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"GRANT CREATE USER to c##vaultadmin WITH ADMIN OPTION container=all;\nGRANT ALTER USER to c##vaultadmin WITH ADMIN OPTION container=all;\nGRANT DROP USER to c##vaultadmin WITH ADMIN OPTION container=all;\nGRANT CREATE SESSION to c##vaultadmin WITH ADMIN OPTION;\nGRANT SELECT on gv_$session to c##vaultadmin;\nGRANT SELECT on v_$sql to c##vaultadmin;\nGRANT ALTER SYSTEM to c##vaultadmin WITH ADMIN OPTION;\n"})}),"\n",(0,r.jsx)(a.p,{children:"Create no authentication user in Oracle database, that has actual monitoring privileges."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:"CREATE USER c##exporter NO AUTHENTICATION;\nGRANT create session TO c##exporter;\nGRANT all necessary privileges that Exporter needs TO c##exporter;\n"})}),"\n",(0,r.jsx)(a.p,{children:"Create database role in Vault:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sh",children:'vault write database/roles/mydb_exporter \\\n    db_name=mydb \\\n    creation_statements=\'CREATE USER {{username}} IDENTIFIED BY "{{password}}"; GRANT CREATE SESSION TO {{username}}; ALTER USER c##exporter GRANT CONNECT THROUGH {{username}};\' \\\n    default_ttl="7d" \\\n    max_ttl="10d"\n'})}),"\n",(0,r.jsx)(a.p,{children:"NB! Make sure to restart Exporter before TTL above expires, this will fetch new database credentials. When TTL expires, Vault will drop the dynamically created database users."}),"\n",(0,r.jsx)(a.p,{children:"And create database config in Exporter:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-yaml",children:"databases:\n  mydb:\n    vault:\n      hashicorp:\n        proxySocket: /var/run/vault/vault.sock\n        mountType: database\n        mountName: database\n        secretPath: mydb_exporter\n        useAsProxyFor: c##exporter\n"})}),"\n",(0,r.jsx)(a.h3,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(a.p,{children:"In this first version it currently only supports queries via HashiCorp Vault Proxy configured to run on the local host and listening on a Unix socket. Currently also required use_auto_auth_token option to be set.\nWill expand the support for other methods in the future."}),"\n",(0,r.jsx)(a.p,{children:"Example Vault Proxy configuration snippet:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:'listener "unix" {\n    address = "/var/run/vault/vault.sock"\n    socket_mode = "0660"\n    socket_user = "vault"\n    socket_group = "vaultaccess"\n    tls_disable = true\n}\n\napi_proxy {\n    # This always uses the auto_auth token when communicating with Vault server, even if client does not send a token\n    use_auto_auth_token = true\n}\n'})})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);