"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8539],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const l={},o=a.createContext(l);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(o.Provider,{value:n},e.children)}},8705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"configuration/oracle-wallet","title":"Oracle Wallet (mTLS)","description":"For mutual TLS (mTLS) connections, you must use an Oracle Wallet.","source":"@site/docs/configuration/oracle-wallet.md","sourceDirName":"configuration","slug":"/configuration/oracle-wallet","permalink":"/oracle-db-appdev-monitoring/docs/next/configuration/oracle-wallet","draft":false,"unlisted":false,"editUrl":"https://github.com/oracle/oracle-db-appdev-monitoring/tree/main/site/docs/configuration/oracle-wallet.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Oracle Wallet (mTLS)","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Multiple Databases","permalink":"/oracle-db-appdev-monitoring/docs/next/configuration/multiple-databases"},"next":{"title":"Alert Logs","permalink":"/oracle-db-appdev-monitoring/docs/next/configuration/alert-logs"}}');var l=t(4848),o=t(8453);const r={title:"Oracle Wallet (mTLS)",sidebar_position:4},s="Using a Wallet",i={},c=[{value:"mTLS for multiple databases with Oracle Wallet",id:"mtls-for-multiple-databases-with-oracle-wallet",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"using-a-wallet",children:"Using a Wallet"})}),"\n",(0,l.jsx)(n.p,{children:"For mutual TLS (mTLS) connections, you must use an Oracle Wallet."}),"\n",(0,l.jsx)(n.p,{children:"If you are using Oracle Autonomous Database with mTLS, for example, you can download and unzip the wallet from the Oracle Cloud Infrastructure (OCI) console."}),"\n",(0,l.jsx)(n.p,{children:"To configure the exporter to use an Oracle Wallet,"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["Set the ",(0,l.jsx)(n.code,{children:"TNS_ADMIN"})," environment variable to the directory containing the unzipped wallet"]}),"\n",(0,l.jsx)(n.li,{children:"Configure your database instance with the appropriate database TNS name:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"databases:\n  mydb:\n    username: admin\n    password: <REPLACE ME>\n    # TNS Name from wallet tnsnames.ora file, e.g., mydb_high\n    url: <TNS Name>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["If you are running the exporter as a container, you can mount the wallet as a volume. For example, mounting the ",(0,l.jsx)(n.code,{children:"./wallet"})," directory to the ",(0,l.jsx)(n.code,{children:"/wallet"})," location:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"docker run -it --rm \\\n    -e DB_USERNAME=pdbadmin \\\n    -e DB_PASSWORD=Welcome12345 \\\n    -e DB_CONNECT_STRING=devdb_tp \\\n    -v ./wallet:/wallet \\\n    -p 9161:9161 \\\n    container-registry.oracle.com/database/observability-exporter:2.2.0\n"})}),"\n",(0,l.jsx)(n.h3,{id:"mtls-for-multiple-databases-with-oracle-wallet",children:"mTLS for multiple databases with Oracle Wallet"}),"\n",(0,l.jsxs)(n.p,{children:["The Oracle Database Metrics exporter uses ODPI-C, which can only initalize the TNS aliases from a ",(0,l.jsx)(n.code,{children:"tnsnames.ora"}),' file once per process. To work around this, the exporter can be configured to read from a "combined" ',(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file containing all TNS aliases for connections in a multi-database configuration."]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"For each database the exporter will connect to, download the corresponding wallet files. If you're using ADB/ATP-S, download the regional wallet instead of the instance wallet if the databases are in the same region."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Copy the TNS aliases the ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file from each wallet, and combine them into one file, so all your database service names are in one file together"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["In the combined ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file, and add the following snippet to each TNS alias connection string, to tell the client where the wallet directory is:"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"(security=(MY_WALLET_DIRECTORY=/path/to/this/database/wallet))\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The combined ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file, which contains the TNS aliases for both databases, and their corresponding wallet location in the ",(0,l.jsx)(n.code,{children:"security"})," configuration will look something like the following:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"db1_high = (description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)(host=adb.****.oraclecloud.com))(connect_data=(service_name=****.adb.oraclecloud.com))(security=(MY_WALLET_DIRECTORY=/wallets/db1)(ssl_server_dn_match=yes)))\n\ndb2_high = (description= (retry_count=20)(retry_delay=3)(address=(protocol=tcps)(port=1522)(host=adb.****.oraclecloud.com))(connect_data=(service_name=****.adb.oraclecloud.com))(security=(MY_WALLET_DIRECTORY=/wallets/db2)(ssl_server_dn_match=yes)))\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"4",children:["\n",(0,l.jsxs)(n.li,{children:["Take wallet files (cwallet.sso, ewallet.p12, & ewallet.pem) for each database, and place them in separate directories. For example, ",(0,l.jsx)(n.code,{children:"db1"})," gets its own directory, ",(0,l.jsx)(n.code,{children:"db2"})," gets its own directory, and so forth."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["The resulting directory structure should look like the following, with wallet information separate from the combined ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"wallets\n\u251c\u2500\u2500 combined\n\u2502   \u251c\u2500\u2500 sqlnet.ora\n\u2502   \u2514\u2500\u2500 tnsnames.ora // Combined tnsnames.ora\n\u251c\u2500\u2500 db1\n\u2502   \u251c\u2500\u2500 cwallet.sso\n\u2502   \u251c\u2500\u2500 ewallet.p12\n\u2502   \u2514\u2500\u2500 ewallet.pem\n\u2514\u2500\u2500 db2\n\u251c\u2500\u2500 cwallet.sso\n\u251c\u2500\u2500 ewallet.p12\n\u2514\u2500\u2500 ewallet.pem\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"5",children:["\n",(0,l.jsxs)(n.li,{children:["Set the ",(0,l.jsx)(n.code,{children:"TNS_ADMIN"})," environment variable where the exporter is running to the directory containing your combined ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"export TNS_ADMIN=/wallets/combined\n"})}),"\n",(0,l.jsxs)(n.ol,{start:"6",children:["\n",(0,l.jsxs)(n.li,{children:["Finally, update the exporter configuration file to include the TNS aliases for all databases you will be connecting to. Ensure your database configuration file does not use the ",(0,l.jsx)(n.code,{children:"tnsAdmin"})," property, as we are using the global ",(0,l.jsx)(n.code,{children:"TNS_ADMIN"})," environment variable to point to the combined ",(0,l.jsx)(n.code,{children:"tnsnames.ora"})," file:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"databases:\n    db2:\n        username: ****\n        password: ****\n        url: db2_high\n        queryTimeout: 5\n        maxOpenConns: 10\n        maxIdleConns: 10\n    db1:\n        username: ****\n        password: ****\n        url: db1_high\n        queryTimeout: 5\n        maxOpenConns: 10\n        maxIdleConns: 10\n"})}),"\n",(0,l.jsx)(n.p,{children:"Then, run the exporter with the config file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"./oracledb_exporter --config.file=my-config-file.yaml\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);