#
#
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
#
#

[[metric]]
context = "database_version"
labels = ["inst_id", "con_id", "banner"]
metricsdesc = { dummy = "full database banner info"}
request = '''
SELECT
    1 as dummy,
    inst_id,
    con_id,
    banner_full as banner
FROM
    sys.gv_$version
'''

[[metric]]
context = "database_rac"
labels = ["inst_id", "name", "con_id"]
metricsdesc = { dummy = "full database banner info", value = "1 for true, 0 for false if rac"}
request = '''
SELECT
    inst_id,
    name,
    con_id,
    case
        when value = 'TRUE' then 1
        when value = 'FALSE' then 0
    end as value
FROM
    sys.gv_$parameter
WHERE
    name = 'cluster_database'
'''


[[metric]]
context = "system_stat"
labels = ["inst_id", "name"]
metricsdesc = { value = "system metric values from sys.gv_$sysstat in user, sql, cache" }
request = '''
SELECT
    inst_id,
    name,
    value
FROM
    sys.gv_$sysstat
WHERE name IN (
    'user commits',
    'user rollbacks',
    'user calls',
    'execute count',
    'physical read total IO requests',
    'physical write total IO requests',
    'physical read total bytes',
    'physical write total bytes'
    )
'''

[[metric]]
context = "system_wait"
labels = ["inst_id", "con_id", "wait_class"]
metricsdesc = { total_waits = "Number of times waits of the class occurred", time_waited = "Amount of time spent in the wait by all sessions in the instance" }
request = '''
SELECT
    inst_id,
    con_id,
    wait_class,
    total_waits,
    time_waited
FROM
    sys.gv_$system_wait_class
'''


[[metric]]
context = "system_time"
labels = ["inst_id", "con_id", "stat_name"]
metricsdesc = {value = "system-wide accumulated time(in microseconds) for each operations"}
request = '''
SELECT
    inst_id,
    con_id,
    stat_name,
    value
FROM
    sys.gv_$sys_time_model
WHERE stat_name IN (
    'DB time',
    'DB CPU',
    'SQL execute elapsed time',
    'PL/SQL execution elapsed time',
    'PL/SQL compilation elapsed time',
    'Java execution elapsed time'
    )
'''


[[metric]]
context = "sga"
labels = ["inst_id"]
metricsdesc = { used_b = "sga used memory in b", free_b = "sga free memory in b", total_b = "sga total memory in b" }
request = '''
SELECT
    used.inst_id AS inst_id,
    used.bytes AS used_b,
    free.bytes AS free_b,
    total.bytes AS total_b
FROM
    ( (
        SELECT
            inst_id,
            SUM(bytes) bytes
        FROM
            sys.gv_$sgastat
        WHERE
            name != 'free memory'
        GROUP BY
            inst_id
    ) used
    INNER JOIN (
        SELECT
            inst_id,
            SUM(bytes) bytes
        FROM
            sys.gv_$sgastat
        WHERE
            name = 'free memory'
        GROUP BY
            inst_id
    ) free ON used.inst_id = free.inst_id
    INNER JOIN (
        SELECT
            inst_id,
            SUM(bytes) bytes
        FROM
            sys.gv_$sgastat
        GROUP BY
            inst_id
    ) total ON free.inst_id = total.inst_id )
'''

[[metric]]
context = "network"
labels = ["inst_id"]
metricsdesc = { received_from_client_b = "network traffic received from client in b", sent_to_client_b = "network traffic sent to client in b" }
request = '''
SELECT
    t1.inst_id                AS inst_id,
    t1.received_from_client   AS received_from_client_b,
    t2.sent_to_client         AS sent_to_client_b
FROM
    (
        SELECT
            inst_id,
            value AS received_from_client
        FROM
            sys.gv_$sysstat
        WHERE
            name LIKE '%received via SQL*Net from client%'
        ORDER BY
            value DESC
    ) t1
    LEFT JOIN (
        SELECT
            inst_id,
            value AS sent_to_client
        FROM
            sys.gv_$sysstat
        WHERE
            name LIKE '%sent via SQL*Net to client%'
        ORDER BY
            value DESC
    ) t2 ON t1.inst_id = t2.inst_id
'''

[[metric]]
context = "instance"
labels = ["inst_id", "host_name", "instance_name", "stime", "uptime", "version_full"]
metricsdesc = { dummy = "do nothing" }
request = '''
SELECT
	1 as dummy,
    inst_id,
    host_name,
    instance_name,
    version_full,
    to_char(startup_time, 'DD-MON-YYYY HH24:MI:SS') AS stime,
    floor(sysdate - startup_time)
    || ' days(s) '
    || trunc(24 *((sysdate - startup_time) - trunc(sysdate - startup_time)))
    || ' hour(s) '  AS uptime
FROM
    sys.gv_$instance
'''



[[metric]]
context = "session_wait"
labels = ["inst_id", "username", "event", "wait_class", "state"]
metricsdesc = { sid = "Session id", serial_number = "Session serial number", wait_time = "Session's last wait time", seconds_in_wait = "Seconds spent in the current wait condition" }
request = '''
SELECT
    sw.inst_id           AS inst_id,
    nvl(s.username, '(oracle)') AS username,
    s.sid                AS sid,
    s.serial#            AS serial_number,
    sw.event             AS event,
    sw.wait_class        AS wait_class,
    sw.wait_time         AS wait_time,
    sw.seconds_in_wait   AS seconds_in_wait,
    sw.state             AS state
FROM
    sys.gv_$session_wait   sw,
    sys.gv_$session        s
WHERE
    s.sid = sw.sid
ORDER BY
    sw.seconds_in_wait DESC
'''

[[metric]]
context = "session"
labels = ["inst_id", "status", "type"]
metricsdesc = { value = "session metric values from sys.gv_$session with count of sessions by status and type" }
request = '''
SELECT
    inst_id,
    status,
    type,
    COUNT(*) AS value
FROM
    sys.gv_$session
GROUP BY
    status,
    type,
    inst_id
'''

[[metric]]
context = "session"
labels = ["inst_id", "status", "type", "machine"]
metricsdesc = { mvalue = "session count group by connected machine" }
request = '''
SELECT
    inst_id,
    status,
    machine,
    type,
    COUNT(*) AS mvalue
FROM
    sys.gv_$session
GROUP BY
    machine,
    STATUS,
    type,
    inst_id
'''

[[metric]]
context = "os"
labels = ["inst_id", "stat_name"]
metricsdesc = { value = "os metric values from sys.gv_$osstat" }
request = '''
SELECT
    inst_id,
    stat_name,
    value
FROM
    sys.gv_$osstat
WHERE stat_name IN (
    'NUM_CPUS',
    'NUM_CPU_CORES',
    'LOAD',
    'IDLE_TIME',
    'BUSY_TIME',
    'USER_TIME',
    'SYS_TIME',
    'IOWAIT_TIME',
    'NICE_TIME',
    'PHYSICAL_MEMORY_BYTES',
    'FREE_MEMORY_BYTES'
)
'''


[[metric]]
context = "tablespace"
labels = [ "tablespace", "type" ]
metricsdesc = { bytes = "Generic counter metric of tablespaces bytes in Oracle.", max_bytes = "Generic counter metric of tablespaces max bytes in Oracle.", free = "Generic counter metric of tablespaces free bytes in Oracle." }
request = '''
SELECT
    dt.tablespace_name   AS tablespace,
    dt.contents          AS type,
    dtum.used_percent    AS used,
    dt.block_size * dtum.used_space AS bytes,
    dt.block_size * dtum.tablespace_size AS max_bytes,
    dt.block_size * ( dtum.tablespace_size - dtum.used_space ) AS free
FROM
    dba_tablespace_usage_metrics   dtum,
    dba_tablespaces                dt
WHERE
    dtum.tablespace_name = dt.tablespace_name
ORDER BY
    tablespace
'''



[[metric]]
context = "sql_query_elapsed_time_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    cpu_time,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY elapsed_time DESC
FETCH FIRST 10 ROWS WITH TIES
'''


[[metric]]
context = "sql_query_cpu_time_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    cpu_time,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY cpu_time DESC
FETCH FIRST 10 ROWS WITH TIES
'''


[[metric]]
context = "sql_query_uio_time_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    cpu_time,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY user_io_wait_time DESC
FETCH FIRST 10 ROWS WITH TIES
'''

[[metric]]
context = "sql_query_total"
labels = ["inst_id"]
metricsdesc = {io_wait_time = "total user io wait time", buffer_gets = "total number of buffer gets", disk_reads = "total number of disk reads", parse_calls = "total number of parse calls"}
request = '''
SELECT
    inst_id,
    SUM(user_io_wait_time) AS io_wait_time,
    SUM(buffer_gets) AS buffer_gets,
    SUM(disk_reads) AS disk_reads,
    SUM(parse_calls) AS parse_calls
FROM
    sys.gv_$sql
GROUP BY inst_id
'''


[[metric]]
context = "sql_query_gets_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", buffer_gets = "Number of buffer gets for all cursors with this SQL text and plan", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    cpu_time,
    buffer_gets,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY buffer_gets DESC
FETCH FIRST 10 ROWS WITH TIES
'''

[[metric]]
context = "sql_query_reads_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", disk_reads = "Number of disk reads for this child cursor", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    disk_reads,
    cpu_time,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY disk_reads DESC
FETCH FIRST 10 ROWS WITH TIES
'''


[[metric]]
context = "sql_query_exec_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", cpu_time = "CPU time (in microseconds) used by this cursor for parsing, executing, and fetching", rows_processed = "Total number of rows the parsed SQL statement returns", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    rows_processed,
    cpu_time,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY rows_processed DESC
FETCH FIRST 10 ROWS WITH TIES
'''


[[metric]]
context = "sql_query_parse_calls_order"
labels = ["inst_id", "module", "sql_id"]
metricsdesc = { elapsed_time = "Elapsed time (in microseconds) used by this cursor for parsing, executing, and fetching", executions = "Number of executions that took place on this object since it was brought into the library cache", parse_calls = "Number of parse calls for this child cursor", user_io_wait_time = "User I/O Wait Time (in microseconds)"}
request = '''
SELECT
    inst_id,
    elapsed_time,
    executions,
    parse_calls,
    user_io_wait_time,
    module,
    sql_id
FROM
    sys.gv_$sql
ORDER BY parse_calls DESC
FETCH FIRST 10 ROWS WITH TIES
'''


[[metric]]
context = "concurrency_foreground_wait_class"
labels = ["inst_id", "con_id", "wait_class_name"]
metricsdesc = {waits_fg = "Total number of waits for the class, from foreground sessions", timeouts_fg = "Total number of timeouts for the class, from foreground sessions", total_wait_time_fg = "Total amount of time (in second) waited for the class, from foreground sessions", avg_wait_time_fg = "Average amount of time (in second) waited for the class, from foreground sessions"}
request = '''
SELECT
    inst_id,
    con_id,
    wait_class AS wait_class_name,
    SUM(total_waits_fg) AS waits_fg,
    SUM(total_timeouts_fg) as timeouts_fg,
    SUM(time_waited_fg)/100 AS total_wait_time_fg,
    SUM(average_wait_fg)/100 AS avg_wait_time_fg
FROM
    sys.gv_$system_event
WHERE
    wait_class NOT IN ('Idle')
GROUP BY
    inst_id, con_id, wait_class
ORDER BY
    total_wait_time_fg DESC, waits_fg DESC
'''


[[metric]]
context = "concurrency_sysevent"
labels = ["inst_id", "con_id"]
metricsdesc = {total_timeout = "Total number of timeouts for the event, from foreground sessions"}
request = '''
SELECT
    inst_id,
    con_id,
    SUM(total_timeouts) AS total_timeout
FROM
    sys.gv_$system_event
GROUP BY
    inst_id, con_id
'''

[[metric]]
context = "concurrency_sysstat"
labels = ["inst_id", "con_id"]
metricsdesc = {db_time = "Total database time (in second), not including idle"}
request = '''
SELECT
    inst_id,
    con_id,
    value/1000 AS db_time
FROM
    sys.gv_$SYSSTAT
WHERE NAME = 'DB time'
'''

[[metric]]
context = "concurrency_foreground_wait_event"
labels = ["inst_id", "con_id", "event_name"]
metricsdesc = {waits_fg = "Total number of waits for the event, from foreground sessions", timeouts_fg = "Total number of timeouts for the event, from foreground sessions", time_waited_fg = "Total amount of time (in milliseconds) waited for the event, from foreground sessions", average_wait_fg = "Average amount of time (in second) waited for the event, from foreground sessions"}
request = '''
SELECT
    inst_id,
    con_id,
    event AS event_name,
    total_waits_fg AS waits_fg,
    total_timeouts_fg AS timeouts_fg,
    time_waited_micro_fg / 1000000 AS time_waited_fg,
    average_wait_fg * 10 AS average_wait_fg
FROM
    sys.gv_$system_event
WHERE
    wait_class NOT IN ('Idle')
ORDER BY
    time_waited_fg DESC, waits_fg DESC
FETCH FIRST 20 ROWS WITH TIES
'''


[[metric]]
context = "concurrency_background_wait_event"
labels = ["inst_id", "con_id", "event_name"]
metricsdesc = {waits_bg = "Total number of waits for the event, from background sessions", timeouts_bg = "Total number of timeouts for the event, from background sessions", time_waited_bg = "Total amount of time (in milliseconds) waited for the event, from background sessions", average_wait_bg = "Average amount of time (in second) waited for the event, from background sessions"}
request = '''
SELECT
    inst_id,
    con_id,
    event AS event_name,
    (total_waits - total_waits_fg) AS waits_bg,
    (total_timeouts - total_timeouts_fg) AS timeouts_bg,
    (time_waited_micro - time_waited_micro_fg) / 1000 AS time_waited_bg,
    average_wait * 10 AS average_wait_bg
FROM
    sys.gv_$system_event
WHERE
    wait_class NOT IN ('Idle')
ORDER BY
    time_waited_bg DESC, waits_bg DESC
FETCH FIRST 20 ROWS WITH TIES
'''

[[metric]]
context = "concurrency_sysstat"
labels = ["inst_id", "con_id"]
metricsdesc = {total_time_waited_bg = "total background wait time"}
request = '''
SELECT
    inst_id,
    con_id,
    (total_wait_time - total_wait_time_fg) / 100 AS total_time_waited_bg
FROM
    (SELECT
        inst_id,
        con_id,
        SUM(TIME_WAITED) AS total_wait_time,
        SUM(TIME_WAITED_FG) AS total_wait_time_fg
    FROM
        sys.gv_$system_event
    GROUP BY inst_id, con_id)
'''



[[metric]]
context = "io_function"
labels = ["inst_id", "con_id", "function_name"]
metricsdesc = {read_data_s = "Number of single block megabytes read", read_req_s = "Number of single block read requests", write_data_s = "Number of megabytes written via single block write requests", write_req_s = "Number of single block write requests", read_data_l = "Number of megabytes read via multiblock read requests", read_req_l = "Number of multiblock read requests", write_data_l = "Number of megabytes written via multiblock write requests", write_req_l = "Number of multiblock write requests", number_of_waits = "Number of synchronous I/O waits by functionality", time = "Total synchronous I/O wait time (in seconds)"}
request = '''
SELECT
    inst_id,
    con_id,
    function_name,
    read_data_s,
    read_req_s,
    write_data_s,
    write_req_s,
    read_data_l,
    read_req_l,
    write_data_l,
    write_req_l,
    number_of_waits,
    time / 1000 AS time
FROM
    (SELECT
        inst_id,
        con_id,
        function_name,
        SUM(small_read_megabytes) AS read_data_s,
        SUM(small_read_reqs) AS read_req_s,
        SUM(small_write_megabytes) AS write_data_s,
        SUM(small_write_reqs) AS write_req_s,
        SUM(large_read_megabytes) AS read_data_l,
        SUM(large_read_reqs) AS read_req_l,
        SUM(large_write_megabytes) AS write_data_l,
        SUM(large_write_reqs) AS write_req_l,
        SUM(number_of_waits) AS number_of_waits,
        SUM(wait_time) AS time
    FROM
        sys.gv_$IOSTAT_FUNCTION
    GROUP BY function_name, inst_id, con_id)
WHERE (read_data_s + write_data_s + read_data_l + write_data_l) > 0
ORDER BY (read_data_s + write_data_s + read_data_l + write_data_l) DESC
FETCH FIRST 5 ROWS WITH TIES
'''

[[metric]]
context = "io_function"
labels = ["inst_id", "con_id", "function_name"]
metricsdesc = {total_read_data_s = "Total Number of single block megabytes read", total_read_req_s = "Total Number of single block read requests", total_write_data_s = "Number of megabytes written via single block write requests", total_write_req_s = "Number of single block write requests", total_read_data_l = "Number of megabytes read via multiblock read requests", total_read_req_l = "Number of multiblock read requests", total_write_data_l = "Number of megabytes written via multiblock write requests", total_write_req_l = "Number of multiblock write requests", total_number_of_waits = "Number of synchronous I/O waits by functionality", total_time = "Total synchronous I/O wait time (in seconds)"}
request = '''
SELECT
    inst_id,
    con_id,
    'total' AS function_name,
    SUM(small_read_megabytes) AS total_read_data_s,
    SUM(small_read_reqs) AS total_read_req_s,
    SUM(small_write_megabytes) AS total_write_data_s,
    SUM(small_write_reqs) AS total_write_req_s,
    SUM(large_read_megabytes) AS total_read_data_l,
    SUM(large_read_reqs) AS total_read_req_l,
    SUM(large_write_megabytes) AS total_write_data_l,
    SUM(large_write_reqs) AS total_write_req_l,
    SUM(number_of_waits) AS total_number_of_waits,
    SUM(wait_time) AS total_time
FROM
    sys.gv_$IOSTAT_FUNCTION
GROUP BY inst_id, con_id
'''

[[metric]]
context = "io_filetype"
labels = ["inst_id", "con_id", "filetype_name"]
metricsdesc = {read_data_s = "Number of single block megabytes read", read_req_s = "Number of single block read requests", write_data_s = "Number of megabytes written via single block write requests", write_req_s = "Number of single block write requests", read_data_l = "Number of megabytes read via multiblock read requests", read_req_l = "Number of multiblock read requests", write_data_l = "Number of megabytes written via multiblock write requests", write_req_l = "Number of multiblock write requests", read_stime_s = "Total service time (in seconds) for single block read requests", write_stime_s = "Total service time (in seconds) for single block write requests", read_stime_l = "Total service time (in seconds) for multiblock read requests", write_stime_l = "Total service time (in seconds) for multiblock write requests"}
request = '''
SELECT
    inst_id,
    con_id,
    filetype_name,
    read_data_s,
    read_req_s,
    write_data_s,
    write_req_s,
    read_data_l,
    read_req_l,
    write_data_l,
    write_req_l,
    read_stime_s / 1000 AS read_stime_s,
    write_stime_s / 1000 AS write_stime_s,
    read_stime_l / 1000 AS read_stime_l,
    write_stime_l / 1000 AS write_stime_l
FROM
    (SELECT
        inst_id,
        con_id,
        filetype_name,
        SUM(small_read_megabytes) AS read_data_s,
        SUM(small_read_reqs) AS read_req_s,
        SUM(small_write_megabytes) AS write_data_s,
        SUM(small_write_reqs) AS write_req_s,
        SUM(large_read_megabytes) AS read_data_l,
        SUM(large_read_reqs) AS read_req_l,
        SUM(large_write_megabytes) AS write_data_l,
        SUM(large_write_reqs) AS write_req_l,
        SUM(small_read_servicetime) AS read_stime_s,
        SUM(small_write_servicetime) AS write_stime_s,
        SUM(large_read_servicetime) AS read_stime_l,
        SUM(large_write_servicetime) AS write_stime_l
    FROM
        sys.gv_$IOSTAT_FILE
    WHERE con_id = 1
    GROUP BY inst_id, con_id, filetype_name)
WHERE (read_data_s + write_data_s + read_data_l + write_data_l) > 0
ORDER BY (read_data_s + write_data_s + read_data_l + write_data_l) DESC
FETCH FIRST 5 ROWS WITH TIES
'''


[[metric]]
context = "io_filetype"
labels = ["inst_id", "con_id", "filetype_name"]
metricsdesc = {total_read_data_s = "Number of single block megabytes read", total_read_req_s = "Number of single block read requests", total_write_data_s = "Number of megabytes written via single block write requests", total_write_req_s = "Number of single block write requests", total_read_data_l = "Number of megabytes read via multiblock read requests", total_read_req_l = "Number of multiblock read requests", total_write_data_l = "Number of megabytes written via multiblock write requests", total_write_req_l = "Number of multiblock write requests", total_read_stime_s = "Total service time (in seconds) for single block read requests", total_write_stime_s = "Total service time (in seconds) for single block write requests", total_read_stime_l = "Total service time (in seconds) for multiblock read requests", total_write_stime_l = "Total service time (in seconds) for multiblock write requests"}
request = '''
SELECT
    inst_id,
    con_id,
    'total' AS filetype_name,
    SUM(small_read_megabytes) AS total_read_data_s,
    SUM(small_read_reqs) AS total_read_req_s,
    SUM(small_write_megabytes) AS total_write_data_s,
    SUM(small_write_reqs) AS total_write_req_s,
    SUM(large_read_megabytes) AS total_read_data_l,
    SUM(large_read_reqs) AS total_read_req_l,
    SUM(large_write_megabytes) AS total_write_data_l,
    SUM(large_write_reqs) AS total_write_req_l,
    SUM(small_read_servicetime) AS total_read_stime_s,
    SUM(small_write_servicetime) AS total_write_stime_s,
    SUM(large_read_servicetime) AS total_read_stime_l,
    SUM(large_write_servicetime) AS total_write_stime_l
FROM
    sys.gv_$IOSTAT_FILE
WHERE con_id = 1
GROUP BY inst_id, con_id
'''
